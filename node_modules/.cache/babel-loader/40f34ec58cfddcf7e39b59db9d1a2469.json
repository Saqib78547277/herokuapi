{"ast":null,"code":"import { useReducer, useCallback } from 'react';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT_CHANGE\":\n      let validForm = true;\n\n      for (const inputId in state.inputs) {\n        if (inputId === action.id) {\n          validForm = validForm && action.inputIsValid;\n        } else {\n          validForm = validForm && state.inputs[inputId].inputIsValid;\n        }\n      }\n\n      return { ...state,\n        inputs: { ...state.inputs,\n          [action.id]: {\n            inputValue: action.inputValue,\n            inputIsValid: action.inputIsValid\n          }\n        },\n        formIsValid: validForm\n      };\n\n    case \"SET_DATA\":\n      return {\n        inputs: action.inputsValues,\n        formIsValid: action.ValidForm\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (inputsValues, Initial_formState) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: inputsValues,\n    formIsValid: Initial_formState\n  });\n  const inputChangeHandler = useCallback((IDofInput, VALUEofInput, VALIDATIONofInput) => {\n    dispatch({\n      type: \"INPUT_CHANGE\",\n      id: IDofInput,\n      inputValue: VALUEofInput,\n      inputIsValid: VALIDATIONofInput\n    });\n  }, []);\n  const setData = useCallback((inputsvalues, Validform) => {\n    dispatch({\n      type: \"SET_DATA\",\n      inputsValues: inputsvalues,\n      ValidForm: Validform\n    });\n  }, []);\n  return [formState, inputChangeHandler, setData];\n};","map":{"version":3,"sources":["C:/Users/John Deer/Downloads/New folder/src/Shared/Hooks/Form-Hook.js"],"names":["useReducer","useCallback","formReducer","state","action","type","validForm","inputId","inputs","id","inputIsValid","inputValue","formIsValid","inputsValues","ValidForm","useForm","Initial_formState","formState","dispatch","inputChangeHandler","IDofInput","VALUEofInput","VALIDATIONofInput","setData","inputsvalues","Validform"],"mappings":"AAAA,SAAQA,UAAR,EAAqBC,WAArB,QAAuC,OAAvC;;AAEA,MAAMC,WAAW,GAAG,CAAEC,KAAF,EAAUC,MAAV,KACpB;AACI,UAAOA,MAAM,CAACC,IAAd;AAEI,SAAK,cAAL;AACA,UAAIC,SAAS,GAAG,IAAhB;;AACI,WAAI,MAAMC,OAAV,IAAqBJ,KAAK,CAACK,MAA3B,EACA;AACI,YAAGD,OAAO,KAAKH,MAAM,CAACK,EAAtB,EACA;AACIH,UAAAA,SAAS,GAAGA,SAAS,IAAIF,MAAM,CAACM,YAAhC;AACH,SAHD,MAKA;AAAIJ,UAAAA,SAAS,GAAGA,SAAS,IAAIH,KAAK,CAACK,MAAN,CAAaD,OAAb,EAAsBG,YAA/C;AAA8D;AAErE;;AACD,aAAO,EACC,GAAGP,KADJ;AAECK,QAAAA,MAAM,EAAG,EACL,GAAGL,KAAK,CAACK,MADJ;AAEL,WAACJ,MAAM,CAACK,EAAR,GAAc;AAACE,YAAAA,UAAU,EAAGP,MAAM,CAACO,UAArB;AAAkCD,YAAAA,YAAY,EAAGN,MAAM,CAACM;AAAxD;AAFT,SAFV;AAKCE,QAAAA,WAAW,EAAGN;AALf,OAAP;;AAOJ,SAAK,UAAL;AACI,aAAM;AACFE,QAAAA,MAAM,EAAGJ,MAAM,CAACS,YADd;AAEFD,QAAAA,WAAW,EAAGR,MAAM,CAACU;AAFnB,OAAN;;AAKJ;AAAS,aAAOX,KAAP;AA3Bb;AA6BH,CA/BD;;AAiCA,OAAO,MAAMY,OAAO,GAAG,CAACF,YAAD,EAAgBG,iBAAhB,KACvB;AACI,QAAM,CAACC,SAAD,EAAaC,QAAb,IAAyBlB,UAAU,CAACE,WAAD,EAAe;AACpDM,IAAAA,MAAM,EAAGK,YAD2C;AAEpDD,IAAAA,WAAW,EAAGI;AAFsC,GAAf,CAAzC;AAKA,QAAMG,kBAAkB,GAAGlB,WAAW,CAAE,CAACmB,SAAD,EAAaC,YAAb,EAA4BC,iBAA5B,KACxC;AACIJ,IAAAA,QAAQ,CAAE;AAACb,MAAAA,IAAI,EAAG,cAAR;AAAyBI,MAAAA,EAAE,EAAEW,SAA7B;AAAyCT,MAAAA,UAAU,EAAEU,YAArD;AAAoEX,MAAAA,YAAY,EAAEY;AAAlF,KAAF,CAAR;AACH,GAHqC,EAGpC,EAHoC,CAAtC;AAIA,QAAMC,OAAO,GAAGtB,WAAW,CAAE,CAACuB,YAAD,EAAgBC,SAAhB,KAC7B;AACIP,IAAAA,QAAQ,CAAE;AAACb,MAAAA,IAAI,EAAG,UAAR;AAAsBQ,MAAAA,YAAY,EAAEW,YAApC;AAAmDV,MAAAA,SAAS,EAAEW;AAA9D,KAAF,CAAR;AACH,GAH0B,EAGzB,EAHyB,CAA3B;AAKA,SAAO,CAACR,SAAD,EAAaE,kBAAb,EAAiCI,OAAjC,CAAP;AACH,CAjBM","sourcesContent":["import {useReducer , useCallback} from 'react';\r\n\r\nconst formReducer = ( state , action ) =>\r\n{\r\n    switch(action.type)\r\n    {\r\n        case \"INPUT_CHANGE\":\r\n        let validForm = true;\r\n            for(const inputId in state.inputs)\r\n            {\r\n                if(inputId === action.id)\r\n                {  \r\n                    validForm = validForm && action.inputIsValid;\r\n                }\r\n                else \r\n                {   validForm = validForm && state.inputs[inputId].inputIsValid; }\r\n            \r\n            }\r\n            return {\r\n                    ...state ,\r\n                    inputs : {\r\n                        ...state.inputs,\r\n                        [action.id] : {inputValue : action.inputValue , inputIsValid : action.inputIsValid} },\r\n                    formIsValid : validForm,\r\n                };\r\n        case \"SET_DATA\":\r\n            return{\r\n                inputs : action.inputsValues,\r\n                formIsValid : action.ValidForm\r\n            }\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport const useForm = (inputsValues , Initial_formState) =>\r\n{\r\n    const [formState , dispatch] = useReducer(formReducer , {\r\n        inputs : inputsValues,\r\n        formIsValid : Initial_formState,\r\n    });\r\n    \r\n    const inputChangeHandler = useCallback( (IDofInput , VALUEofInput , VALIDATIONofInput) =>\r\n    {\r\n        dispatch( {type : \"INPUT_CHANGE\" , id: IDofInput , inputValue: VALUEofInput , inputIsValid: VALIDATIONofInput})\r\n    },[]);\r\n    const setData = useCallback( (inputsvalues , Validform) =>\r\n    {\r\n        dispatch( {type : \"SET_DATA\"  , inputsValues: inputsvalues , ValidForm: Validform})\r\n    },[]);\r\n\r\n    return [formState , inputChangeHandler, setData]\r\n}"]},"metadata":{},"sourceType":"module"}