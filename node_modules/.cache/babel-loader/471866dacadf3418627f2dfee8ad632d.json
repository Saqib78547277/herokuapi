{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Deer\\\\Downloads\\\\New folder\\\\src\\\\Places\\\\Pages\\\\UpdatePlace.js\";\nimport React, { useState, useEffect, useContext, useCallback } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Input from '../../Shared/Components/UI Element/Input';\nimport { AuthContext } from '../../Shared/Contexts/Authentication-Context';\nimport { useForm } from '../../Shared/Hooks/Form-Hook';\nimport { MIN_LENGTH_VALIDATOR } from '../../Shared/Util/Validators/Validator';\nimport Card from '../../Shared/Components/Card/Card';\nimport Spinner from '../../Shared/Components/UI Element/Spinner';\nimport Backdrop from '../../Shared/Components/Backdrop/Backdrop';\nimport classes from './NewPlaces.module.css';\n\nconst UpdatePlace = props => {\n  const dispatchPlaceUpdated = useDispatch();\n  const Authenticated = useContext(AuthContext);\n  const history = useHistory();\n  const uid = Authenticated.userId;\n  const pID = useParams().pID;\n  const [place, setPlace] = useState();\n  const [updating, setUpdating] = useState(false);\n  const place2BeUpdated = useSelector(state => {\n    var _state$places;\n\n    return (_state$places = state.places) === null || _state$places === void 0 ? void 0 : _state$places.single_place;\n  });\n  const [formState, inputChangeHandle, dataSetter] = useForm({\n    title: {\n      inputValue: '',\n      inputisValid: false\n    },\n    description: {\n      inputValue: '',\n      inputisValid: false\n    }\n  }, false);\n  const getPlaceById = useCallback(async () => {\n    if (place2BeUpdated) {\n      dataSetter({\n        title: {\n          inputValue: place2BeUpdated.P_Title,\n          inputisValid: true\n        },\n        description: {\n          inputValue: place2BeUpdated.P_Description,\n          inputisValid: true\n        }\n      }, true);\n      setPlace(place2BeUpdated);\n    }\n  }, [place2BeUpdated, dataSetter]);\n  useEffect(() => {\n    getPlaceById();\n  }, [getPlaceById]);\n\n  const submitUpdatedPlace = async e => {\n    e.preventDefault();\n\n    try {\n      setUpdating(true);\n      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL.split(';')[0]}/places/${pID}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: \"Bearer \" + Authenticated.userToken + 's'\n        },\n        body: JSON.stringify({\n          title: formState.inputs.title.inputValue,\n          description: formState.inputs.description.inputValue\n        })\n      });\n      const responseData = await response.json();\n\n      if (!response.ok) {\n        if (responseData.errorCode === 401) Authenticated.logout();\n        setUpdating(false);\n        history.push(`/${uid}/places`);\n        alert(responseData.errorCode + \"\\n\" + responseData.errorMsg);\n      } else {\n        setUpdating(false);\n        dispatchPlaceUpdated({\n          type: 'PLACE_UPDATED'\n        });\n        history.push(`/${uid}/places`);\n      }\n    } catch (error) {\n      setUpdating(false);\n      alert(error);\n    }\n  };\n\n  if (!place) return /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 25\n    }\n  }, \"   \", /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 34\n    }\n  }, \"Loading...\"), \"  \");else return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, updating && /*#__PURE__*/React.createElement(Backdrop, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    style: {\n      color: 'gold'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, \"Updating...\")), /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.addPlaceFORM,\n    onSubmit: submitUpdatedPlace,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    type: \"Input\",\n    Label: \"Title\",\n    initialValue: formState.inputs.title.inputValue,\n    pHolder: \"Enter The Name of Place\",\n    isValid: formState.inputs.title.inputisValid,\n    Error: \"Please Enter a Valid Title with MINIMUM LENGTH of 5\",\n    onInputChange: inputChangeHandle,\n    validators: [MIN_LENGTH_VALIDATOR(5)],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"description\",\n    type: \"TextArea\",\n    Label: \"Description\",\n    initialValue: formState.inputs.description.inputValue,\n    pHolder: \"Enter Description for Selected Place\",\n    isValid: formState.inputs.description.inputisValid,\n    Error: \"Please Enter a Valid Description with MINIMUM LENGTH of 5\",\n    onInputChange: inputChangeHandle,\n    validators: [MIN_LENGTH_VALIDATOR(5)],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !formState.formIsValid,\n    className: `btn ${formState.formIsValid ? 'btn-outline-success' : 'btn-danger'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }, \"UPDATE PLACE\")));\n};\n\nexport default UpdatePlace;","map":{"version":3,"sources":["C:/Users/John Deer/Downloads/New folder/src/Places/Pages/UpdatePlace.js"],"names":["React","useState","useEffect","useContext","useCallback","useParams","useHistory","useSelector","useDispatch","Input","AuthContext","useForm","MIN_LENGTH_VALIDATOR","Card","Spinner","Backdrop","classes","UpdatePlace","props","dispatchPlaceUpdated","Authenticated","history","uid","userId","pID","place","setPlace","updating","setUpdating","place2BeUpdated","state","places","single_place","formState","inputChangeHandle","dataSetter","title","inputValue","inputisValid","description","getPlaceById","P_Title","P_Description","submitUpdatedPlace","e","preventDefault","response","fetch","process","env","REACT_APP_BACKEND_URL","split","method","headers","Authorization","userToken","body","JSON","stringify","inputs","responseData","json","ok","errorCode","logout","push","alert","errorMsg","type","error","center","color","addPlaceFORM","formIsValid"],"mappings":"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","sourcesContent":["import React, { useState,useEffect, useContext, useCallback } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport Input from '../../Shared/Components/UI Element/Input';\r\nimport {AuthContext} from '../../Shared/Contexts/Authentication-Context';\r\nimport {useForm} from '../../Shared/Hooks/Form-Hook';\r\nimport {MIN_LENGTH_VALIDATOR} from '../../Shared/Util/Validators/Validator';\r\nimport Card from '../../Shared/Components/Card/Card';\r\nimport Spinner from '../../Shared/Components/UI Element/Spinner';\r\nimport Backdrop from '../../Shared/Components/Backdrop/Backdrop';\r\nimport classes from './NewPlaces.module.css'\r\n\r\n\r\nconst UpdatePlace = props =>\r\n{\r\n    const dispatchPlaceUpdated = useDispatch();\r\n    const Authenticated = useContext(AuthContext);\r\n    const history = useHistory();\r\n    \r\n    const uid = Authenticated.userId;\r\n    const pID = useParams().pID;\r\n\r\n    const [place, setPlace] = useState();\r\n    const [updating, setUpdating] = useState(false);\r\n    const place2BeUpdated = useSelector( state => state.places?.single_place);\r\n\r\n  \r\n    const [formState , inputChangeHandle, dataSetter] = useForm({\r\n        title : {\r\n            inputValue : '',\r\n            inputisValid : false\r\n        },\r\n        description : {\r\n            inputValue : '',\r\n            inputisValid : false\r\n        },\r\n    } , false)\r\n    \r\n    const getPlaceById = useCallback( async () =>\r\n        {\r\n            if(place2BeUpdated)\r\n            {  \r\n                dataSetter(\r\n                {\r\n                    title : {\r\n                        inputValue : place2BeUpdated.P_Title,\r\n                        inputisValid : true\r\n                    },\r\n                    description : {\r\n                        inputValue : place2BeUpdated.P_Description,\r\n                        inputisValid : true\r\n                    },\r\n                } , true)\r\n                setPlace(place2BeUpdated);\r\n            }\r\n        },[place2BeUpdated,dataSetter])\r\n\r\n        \r\n    useEffect(()=>\r\n    {  \r\n        getPlaceById();\r\n    },[getPlaceById])\r\n\r\n    const submitUpdatedPlace = async (e) =>\r\n    {\r\n        e.preventDefault();\r\n        try \r\n        {   setUpdating(true);\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_URL.split(';')[0]}/places/${pID}`,\r\n            {\r\n                method: 'PATCH',\r\n                headers: { 'Content-Type' : 'application/json',\r\n                            Authorization :  \"Bearer \" + Authenticated.userToken+'s'},\r\n                body: JSON.stringify(\r\n                    {\r\n                        title : formState.inputs.title.inputValue,\r\n                        description : formState.inputs.description.inputValue,\r\n                    }\r\n                )\r\n            });\r\n            const responseData = await response.json();\r\n\r\n            if(!response.ok)\r\n            {\r\n                if(responseData.errorCode===401) Authenticated.logout()\r\n                setUpdating(false);\r\n                history.push(`/${uid}/places`);\r\n                alert(responseData.errorCode+\"\\n\"+responseData.errorMsg)\r\n            }\r\n            else\r\n            {   \r\n                setUpdating(false);\r\n                dispatchPlaceUpdated({ type : 'PLACE_UPDATED'});\r\n                history.push(`/${uid}/places`)\r\n            }  \r\n        } \r\n        catch (error) { setUpdating(false); alert(error) }\r\n    }\r\n\r\n    if(!place) return   <Card>   <h4>Loading...</h4>  </Card>\r\n    \r\n    else\r\n    return(\r\n        <div className={classes.center}>\r\n            {updating && \r\n            <Backdrop>\r\n                <Spinner />\r\n                <h2 style={{color:'gold'}}>Updating...</h2>\r\n            </Backdrop>\r\n            }\r\n            <form className = {classes.addPlaceFORM} onSubmit = {submitUpdatedPlace}>\r\n\r\n                <Input  \r\n                    id = \"title\" type = \"Input\" Label = \"Title\" initialValue = {formState.inputs.title.inputValue}\r\n                    pHolder = \"Enter The Name of Place\" isValid = {formState.inputs.title.inputisValid} \r\n                    Error = \"Please Enter a Valid Title with MINIMUM LENGTH of 5\" onInputChange = {inputChangeHandle}\r\n                    validators = {[MIN_LENGTH_VALIDATOR(5)]} \r\n                />\r\n\r\n                <Input  \r\n                    id = \"description\" type = \"TextArea\" Label = \"Description\" initialValue = {formState.inputs.description.inputValue}\r\n                    pHolder = \"Enter Description for Selected Place\"  isValid = {formState.inputs.description.inputisValid} \r\n                    Error = \"Please Enter a Valid Description with MINIMUM LENGTH of 5\" onInputChange = {inputChangeHandle}\r\n                    validators = {[MIN_LENGTH_VALIDATOR(5)]} \r\n                />\r\n\r\n                <button disabled={!formState.formIsValid} className = {`btn ${formState.formIsValid ? 'btn-outline-success' : 'btn-danger'}`}>\r\n                UPDATE PLACE\r\n                </button>\r\n            </form>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n\r\nexport default UpdatePlace;"]},"metadata":{},"sourceType":"module"}