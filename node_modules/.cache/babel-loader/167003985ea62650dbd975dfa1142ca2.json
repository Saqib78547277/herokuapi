{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Deer\\\\Downloads\\\\New folder\\\\src\\\\Authentication\\\\SignUp-Form\\\\SignUpForm.js\";\nimport React, { useContext, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport Input from '../../Shared/Components/UI Element/Input';\nimport ImageInput from '../../Shared/Components/UI Element/ImageInput';\nimport Spinner from '../../Shared/Components/UI Element/Spinner';\nimport Backdrop from '../../Shared/Components/Backdrop/Backdrop';\nimport { AuthContext } from '../../Shared/Contexts/Authentication-Context';\nimport { useForm } from '../../Shared/Hooks/Form-Hook';\nimport { MIN_LENGTH_VALIDATOR, EMAIL_VALIDATOR, MAX_LENGTH_VALIDATOR } from '../../Shared/Util/Validators/Validator';\nimport classes from './SignUpFrom.module.css';\n\nconst SignUpForm = () => {\n  const Authenticated = useContext(AuthContext);\n  const dispatchSignupAction = useDispatch();\n  const [signUp, setSignUp] = useState(false);\n  const [formState, inputChangeHandler] = useForm({\n    userName: {\n      inputValue: '',\n      inputisValid: false\n    },\n    userImage: {\n      inputValue: '',\n      inputisValid: false\n    },\n    email: {\n      inputValue: '',\n      inputisValid: false\n    },\n    password: {\n      inputValue: '',\n      inputisValid: false\n    },\n    conform_password: {\n      inputValue: '',\n      inputisValid: false\n    }\n  }, false);\n\n  const submitForm = async e => {\n    e.preventDefault();\n\n    if (formState.inputs.password.inputValue === formState.inputs.conform_password.inputValue) {\n      if (formState.inputs.userImage.inputValue.size > 3145728) {\n        alert(\"Please Select An Image With Size Less than 3MB\");\n        return;\n      }\n\n      setSignUp(true);\n\n      try {\n        const SignUpData = new FormData();\n        SignUpData.append('name', formState.inputs.userName.inputValue);\n        SignUpData.append('email', formState.inputs.email.inputValue);\n        SignUpData.append('password', formState.inputs.password.inputValue);\n        SignUpData.append('userImage', formState.inputs.userImage.inputValue);\n        const response = await fetch(process.env.REACT_APP_BACKEND_URL.split(';')[0] + '/users/signup', {\n          method: 'POST',\n          body: SignUpData\n        });\n        const responseData = await response.json();\n\n        if (!response.ok) {\n          setSignUp(false);\n          alert(responseData.errorCode + \"\\n\" + responseData.errorMsg);\n        } else {\n          setSignUp(false);\n          dispatchSignupAction({\n            type: 'SIGN_UP'\n          });\n          Authenticated.login(responseData.U_ID, responseData.U_Image, responseData.U_Token);\n        }\n      } catch (error) {\n        setSignUp(false);\n        console.dir(error);\n        alert(error);\n      }\n    } else alert(\"Passwords Do not Match\");\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, signUp && /*#__PURE__*/React.createElement(Backdrop, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    style: {\n      color: 'gold'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }, \"Signing Up\")), /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.signUpMainForm,\n    onSubmit: submitForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      alignSelf: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, \"SignUp\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row align-items-center px-md-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6 col-12 order-md-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ImageInput, {\n    id: \"userImage\",\n    Error: \"Please Pick an Image\",\n    height: \"200px\",\n    maxSize: 3,\n    onInputChange: inputChangeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6 col-12 order-md-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"userName\",\n    type: \"Input\",\n    fieldType: \"text\",\n    Label: \"Name\",\n    pHolder: \"Enter Your Name\",\n    rClass: \"gYellow\",\n    Error: \"Name Field is Required with MAXIMUM LENGTH of 25 Words\",\n    onInputChange: inputChangeHandler,\n    validators: [MIN_LENGTH_VALIDATOR(1), MAX_LENGTH_VALIDATOR(25)],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"email\",\n    type: \"Input\",\n    fieldType: \"email\",\n    Label: \"Email\",\n    pHolder: \"Enter Email Address\",\n    rClass: \"gYellow\",\n    Error: \"Please Enter a Valid Email\",\n    onInputChange: inputChangeHandler,\n    validators: [EMAIL_VALIDATOR()],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row p-md-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6 col-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"password\",\n    type: \"Input\",\n    fieldType: \"password\",\n    Label: \"Password\",\n    pHolder: \"Enter Password\",\n    rClass: \"gYellow\",\n    Error: \"Password Field is Required with MAXIMUM LENGTH of 15 Words\",\n    onInputChange: inputChangeHandler,\n    validators: [MIN_LENGTH_VALIDATOR(1), MAX_LENGTH_VALIDATOR(15)],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6 col-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"conform_password\",\n    type: \"Input\",\n    fieldType: \"password\",\n    Label: \"Conform Password\",\n    pHolder: \"Enter Password\",\n    rClass: \"gYellow\",\n    Error: \"Password Field is Required with MAXIMUM LENGTH of 15 Words\",\n    onInputChange: inputChangeHandler,\n    validators: [MIN_LENGTH_VALIDATOR(1), MAX_LENGTH_VALIDATOR(15)],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-outline-success p-2 mt-3 mx-md-2\",\n    disabled: !formState.formIsValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 21\n    }\n  }, \"SIGN UP\")));\n};\n\nexport default SignUpForm;","map":{"version":3,"sources":["C:/Users/John Deer/Downloads/New folder/src/Authentication/SignUp-Form/SignUpForm.js"],"names":["React","useContext","useState","useDispatch","Input","ImageInput","Spinner","Backdrop","AuthContext","useForm","MIN_LENGTH_VALIDATOR","EMAIL_VALIDATOR","MAX_LENGTH_VALIDATOR","classes","SignUpForm","Authenticated","dispatchSignupAction","signUp","setSignUp","formState","inputChangeHandler","userName","inputValue","inputisValid","userImage","email","password","conform_password","submitForm","e","preventDefault","inputs","size","alert","SignUpData","FormData","append","response","fetch","process","env","REACT_APP_BACKEND_URL","split","method","body","responseData","json","ok","errorCode","errorMsg","type","login","U_ID","U_Image","U_Token","error","console","dir","center","color","signUpMainForm","alignSelf","formIsValid"],"mappings":"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","sourcesContent":["import React , {useContext, useState} from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport Input from '../../Shared/Components/UI Element/Input';\r\nimport ImageInput from '../../Shared/Components/UI Element/ImageInput';\r\nimport Spinner from '../../Shared/Components/UI Element/Spinner';\r\nimport Backdrop from '../../Shared/Components/Backdrop/Backdrop';\r\nimport {AuthContext} from '../../Shared/Contexts/Authentication-Context';\r\nimport {useForm} from '../../Shared/Hooks/Form-Hook';\r\nimport {MIN_LENGTH_VALIDATOR , EMAIL_VALIDATOR, MAX_LENGTH_VALIDATOR} from '../../Shared/Util/Validators/Validator';\r\nimport classes from './SignUpFrom.module.css';\r\n\r\nconst SignUpForm = () =>\r\n{\r\n    const Authenticated = useContext(AuthContext);\r\n    const dispatchSignupAction = useDispatch();\r\n\r\n    const [signUp, setSignUp] = useState(false);\r\n\r\n    const [formState , inputChangeHandler] = useForm({\r\n        userName : {\r\n            inputValue : '',\r\n            inputisValid : false\r\n        },\r\n        userImage : {\r\n            inputValue : '',\r\n            inputisValid : false\r\n        },\r\n        email : {\r\n            inputValue : '',\r\n            inputisValid : false\r\n        },\r\n        password : {\r\n            inputValue : '',\r\n            inputisValid : false\r\n        },\r\n        conform_password : {\r\n            inputValue : '',\r\n            inputisValid : false\r\n        },\r\n    } , false)\r\n    \r\n    const submitForm = async e =>\r\n    {\r\n         e.preventDefault();\r\n        \r\n        if(formState.inputs.password.inputValue === formState.inputs.conform_password.inputValue)\r\n        {  if(formState.inputs.userImage.inputValue.size > 3145728) \r\n            {alert(\"Please Select An Image With Size Less than 3MB\"); return}\r\n            setSignUp(true);\r\n            try \r\n            {\r\n                const SignUpData = new FormData();\r\n                SignUpData.append('name', formState.inputs.userName.inputValue);\r\n                SignUpData.append('email', formState.inputs.email.inputValue);\r\n                SignUpData.append('password', formState.inputs.password.inputValue);\r\n                SignUpData.append('userImage', formState.inputs.userImage.inputValue);\r\n                \r\n                const response = await fetch(process.env.REACT_APP_BACKEND_URL.split(';')[0] + '/users/signup',\r\n                {\r\n                    method : 'POST',\r\n                    body   : SignUpData,\r\n                })\r\n    \r\n                const responseData = await response.json();\r\n                if(!response.ok)\r\n                {\r\n                    setSignUp(false);\r\n                    alert(responseData.errorCode+\"\\n\"+responseData.errorMsg);\r\n                }\r\n                else\r\n                {\r\n                    setSignUp(false);\r\n                    dispatchSignupAction({type: 'SIGN_UP'})\r\n                    Authenticated.login(responseData.U_ID, responseData.U_Image, responseData.U_Token)\r\n                }\r\n    \r\n            } catch (error) { setSignUp(false); console.dir(error); alert(error)     }\r\n        }\r\n        else alert(\"Passwords Do not Match\")\r\n    }\r\n   \r\n    return(\r\n        <div className={classes.center} >\r\n            {signUp && \r\n            <Backdrop>\r\n                <Spinner />\r\n                <h2 style={{color:'gold'}}>Signing Up</h2>\r\n            </Backdrop>\r\n            }\r\n            <form className = {classes.signUpMainForm} onSubmit = { submitForm}>\r\n                <h3 style={{alignSelf: 'center'}}>SignUp</h3>\r\n\r\n                <div className='row align-items-center px-md-2'>\r\n                    <div className='col-md-6 col-12 order-md-2'>\r\n                        <ImageInput \r\n                            id='userImage' Error = \"Please Pick an Image\" height = '200px' maxSize = {3}\r\n                            onInputChange = {inputChangeHandler}\r\n                        />\r\n                    </div>\r\n                    <div className='col-md-6 col-12 order-md-1'>\r\n                        <Input  \r\n                            id = \"userName\" type = \"Input\" fieldType = 'text' Label = \"Name\" \r\n                            pHolder = \"Enter Your Name\" rClass = 'gYellow'\r\n                            Error = \"Name Field is Required with MAXIMUM LENGTH of 25 Words\" onInputChange = {inputChangeHandler}\r\n                            validators = {[MIN_LENGTH_VALIDATOR(1),MAX_LENGTH_VALIDATOR(25)]} \r\n                        />\r\n                        <Input  \r\n                            id = \"email\" type = \"Input\" fieldType = 'email' Label = \"Email\" \r\n                            pHolder = \"Enter Email Address\" rClass = 'gYellow'\r\n                            Error = \"Please Enter a Valid Email\" onInputChange = {inputChangeHandler}\r\n                            validators = {[EMAIL_VALIDATOR()]} \r\n                        />\r\n                    </div>\r\n                    \r\n                </div>\r\n                    \r\n                <div className='row p-md-2'>\r\n                    <div className='col-md-6 col-12'>\r\n                        <Input  \r\n                            id = \"password\" type = \"Input\" fieldType = 'password'  Label = \"Password\" \r\n                            pHolder = \"Enter Password\" rClass = 'gYellow'\r\n                            Error = \"Password Field is Required with MAXIMUM LENGTH of 15 Words\" onInputChange = {inputChangeHandler}\r\n                            validators = {[MIN_LENGTH_VALIDATOR(1),MAX_LENGTH_VALIDATOR(15)]}\r\n                        />\r\n                    </div>\r\n                    <div className='col-md-6 col-12'>\r\n                        <Input  \r\n                            id = \"conform_password\" type = \"Input\" fieldType = 'password'  Label = \"Conform Password\" \r\n                            pHolder = \"Enter Password\" rClass = 'gYellow'\r\n                            Error = \"Password Field is Required with MAXIMUM LENGTH of 15 Words\" onInputChange = {inputChangeHandler}\r\n                            validators = {[MIN_LENGTH_VALIDATOR(1),MAX_LENGTH_VALIDATOR(15)]}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                    \r\n                    <button  className = 'btn btn-outline-success p-2 mt-3 mx-md-2' disabled={!formState.formIsValid}>\r\n                        SIGN UP\r\n                    </button>\r\n                \r\n\r\n                \r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUpForm;"]},"metadata":{},"sourceType":"module"}