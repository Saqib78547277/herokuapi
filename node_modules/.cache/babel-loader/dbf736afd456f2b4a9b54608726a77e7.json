{"ast":null,"code":"const REQUIRE_VALIDATOR_TYPE = \"REQUIRE\";\nconst MIN_LENGTH_VALIDATOR_TYPE = \"MIN_LENGTH\";\nconst MAX_LENGTH_VALIDATOR_TYPE = \"MAX_LENGTH\";\nconst EMAIL_VALIDATOR_TYPE = \"EMAIL\"; // const FILE_VALIDATOR_TYPE    = \"FILE\";\n\nexport const REQUIRE_VALIDATOR = () => ({\n  type: REQUIRE_VALIDATOR_TYPE\n});\nexport const MIN_LENGTH_VALIDATOR = v => ({\n  type: MIN_LENGTH_VALIDATOR_TYPE,\n  value: v\n});\nexport const MAX_LENGTH_VALIDATOR = v => ({\n  type: MAX_LENGTH_VALIDATOR_TYPE,\n  value: v\n});\nexport const EMAIL_VALIDATOR = () => ({\n  type: EMAIL_VALIDATOR_TYPE\n});\nexport const validator = (value, valiadtors) => {\n  let isValid = true;\n\n  if (valiadtors) {\n    for (let oneValidator of valiadtors) {\n      if (oneValidator.type === REQUIRE_VALIDATOR_TYPE) {\n        isValid = isValid && value.trim().length > 0;\n      }\n\n      if (oneValidator.type === MIN_LENGTH_VALIDATOR_TYPE) {\n        isValid = isValid && value.trim().length >= oneValidator.value;\n      }\n\n      if (oneValidator.type === MAX_LENGTH_VALIDATOR_TYPE) {\n        isValid = isValid && value.trim().length <= oneValidator.value;\n      }\n\n      if (oneValidator.type === EMAIL_VALIDATOR_TYPE) {\n        isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n      }\n    }\n  }\n\n  return isValid;\n};","map":{"version":3,"sources":["C:/Users/John Deer/Downloads/New folder/src/Shared/Util/Validators/Validator.js"],"names":["REQUIRE_VALIDATOR_TYPE","MIN_LENGTH_VALIDATOR_TYPE","MAX_LENGTH_VALIDATOR_TYPE","EMAIL_VALIDATOR_TYPE","REQUIRE_VALIDATOR","type","MIN_LENGTH_VALIDATOR","v","value","MAX_LENGTH_VALIDATOR","EMAIL_VALIDATOR","validator","valiadtors","isValid","oneValidator","trim","length","test"],"mappings":"AAAA,MAAMA,sBAAsB,GAAM,SAAlC;AACA,MAAMC,yBAAyB,GAAG,YAAlC;AACA,MAAMC,yBAAyB,GAAG,YAAlC;AACA,MAAMC,oBAAoB,GAAQ,OAAlC,C,CACA;;AAEA,OAAQ,MAAMC,iBAAiB,GAAO,OAAa;AAAIC,EAAAA,IAAI,EAAIL;AAAZ,CAAb,CAA9B;AACR,OAAQ,MAAMM,oBAAoB,GAAIC,CAAC,KAAY;AAAIF,EAAAA,IAAI,EAAIJ,yBAAZ;AAAyCO,EAAAA,KAAK,EAAED;AAAhD,CAAZ,CAA/B;AACR,OAAQ,MAAME,oBAAoB,GAAIF,CAAC,KAAY;AAAIF,EAAAA,IAAI,EAAIH,yBAAZ;AAAyCM,EAAAA,KAAK,EAAED;AAAhD,CAAZ,CAA/B;AACR,OAAQ,MAAMG,eAAe,GAAS,OAAa;AAAIL,EAAAA,IAAI,EAAIF;AAAZ,CAAb,CAA9B;AAER,OAAO,MAAMQ,SAAS,GAAG,CAACH,KAAD,EAASI,UAAT,KACzB;AACI,MAAIC,OAAO,GAAG,IAAd;;AACA,MAAGD,UAAH,EACA;AACI,SAAI,IAAIE,YAAR,IAAwBF,UAAxB,EACA;AACI,UAAGE,YAAY,CAACT,IAAb,KAAsBL,sBAAzB,EACA;AAACa,QAAAA,OAAO,GAAIA,OAAO,IAAIL,KAAK,CAACO,IAAN,GAAaC,MAAb,GAAsB,CAA5C;AAA+C;;AAEhD,UAAGF,YAAY,CAACT,IAAb,KAAsBJ,yBAAzB,EACA;AAACY,QAAAA,OAAO,GAAIA,OAAO,IAAKL,KAAK,CAACO,IAAN,GAAaC,MAAb,IAAuBF,YAAY,CAACN,KAA3D;AAAkE;;AAEnE,UAAGM,YAAY,CAACT,IAAb,KAAsBH,yBAAzB,EACA;AAACW,QAAAA,OAAO,GAAIA,OAAO,IAAKL,KAAK,CAACO,IAAN,GAAaC,MAAb,IAAsBF,YAAY,CAACN,KAA1D;AAAiE;;AAElE,UAAGM,YAAY,CAACT,IAAb,KAAsBF,oBAAzB,EACA;AAACU,QAAAA,OAAO,GAAIA,OAAO,IAAI,iBAAiBI,IAAjB,CAAsBT,KAAtB,CAAtB;AAAoD;AACxD;AACJ;;AACF,SAAOK,OAAP;AACF,CArBM","sourcesContent":["const REQUIRE_VALIDATOR_TYPE    = \"REQUIRE\";\r\nconst MIN_LENGTH_VALIDATOR_TYPE = \"MIN_LENGTH\";\r\nconst MAX_LENGTH_VALIDATOR_TYPE = \"MAX_LENGTH\";\r\nconst EMAIL_VALIDATOR_TYPE      = \"EMAIL\";\r\n// const FILE_VALIDATOR_TYPE    = \"FILE\";\r\n\r\nexport  const REQUIRE_VALIDATOR     = ()    =>    ({   type:   REQUIRE_VALIDATOR_TYPE  });\r\nexport  const MIN_LENGTH_VALIDATOR  = v     =>    ({   type:   MIN_LENGTH_VALIDATOR_TYPE ,  value: v});\r\nexport  const MAX_LENGTH_VALIDATOR  = v     =>    ({   type:   MAX_LENGTH_VALIDATOR_TYPE ,  value: v});\r\nexport  const EMAIL_VALIDATOR       = ()    =>    ({   type:   EMAIL_VALIDATOR_TYPE });\r\n\r\nexport const validator = (value , valiadtors) =>\r\n{\r\n    let isValid = true;\r\n    if(valiadtors)\r\n    {\r\n        for(let oneValidator of valiadtors)\r\n        {   \r\n            if(oneValidator.type === REQUIRE_VALIDATOR_TYPE)\r\n            {isValid =  isValid && value.trim().length > 0;}\r\n            \r\n            if(oneValidator.type === MIN_LENGTH_VALIDATOR_TYPE)\r\n            {isValid =  isValid &&  value.trim().length >= oneValidator.value;}\r\n            \r\n            if(oneValidator.type === MAX_LENGTH_VALIDATOR_TYPE)\r\n            {isValid =  isValid &&  value.trim().length <=oneValidator.value;}\r\n            \r\n            if(oneValidator.type === EMAIL_VALIDATOR_TYPE) \r\n            {isValid =  isValid && /^\\S+@\\S+\\.\\S+$/.test(value);}\r\n        }\r\n    }\r\n   return isValid\r\n}"]},"metadata":{},"sourceType":"module"}