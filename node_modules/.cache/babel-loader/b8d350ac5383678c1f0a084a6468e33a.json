{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Deer\\\\Downloads\\\\New folder\\\\src\\\\Places\\\\Pages\\\\NewPlaces.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport JoditEditor from \"jodit-react\";\nimport Input from '../../Shared/Components/UI Element/Input';\nimport ImageInput from '../../Shared/Components/UI Element/ImageInput';\nimport Spinner from '../../Shared/Components/UI Element/Spinner';\nimport Backdrop from '../../Shared/Components/Backdrop/Backdrop';\nimport { useForm } from '../../Shared/Hooks/Form-Hook';\nimport { MIN_LENGTH_VALIDATOR, MAX_LENGTH_VALIDATOR } from '../../Shared/Util/Validators/Validator';\nimport classes from './NewPlaces.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createPlace, getSinglePlace } from '../../Actions/PlacesActions';\nimport isEmpty from '../../Shared/Util/Validators/isEmpty';\n\nconst NewPlaces = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const {\n    U_ID\n  } = JSON.parse(localStorage.getItem('userData'));\n  const {\n    pID\n  } = useParams() || {};\n  const {\n    single_place: place,\n    loading_places\n  } = useSelector(state => state.places);\n  const [adding, setAdding] = useState(false);\n  const [description, setDescription] = useState('');\n  const [formState, inputChangeHandler, dataSetter] = useForm({\n    title: {\n      inputValue: '',\n      inputisValid: false\n    },\n    address: {\n      inputValue: '',\n      inputisValid: false\n    },\n    newPlaceImage: {\n      inputValue: '',\n      inputisValid: false\n    }\n  }, false);\n\n  const addPlace = async e => {\n    e.preventDefault();\n\n    if (formState.inputs.newPlaceImage.inputValue.size > 5242880) {\n      alert(\"Please Select An Image With Size Less than 5MB\");\n      return;\n    }\n\n    setAdding(true);\n\n    try {\n      const newPlaceData = new FormData();\n      const {\n        title,\n        address,\n        newPlaceImage\n      } = formState.inputs || {};\n      newPlaceData.append('title', title.inputValue);\n      newPlaceData.append('address', address.inputValue);\n      newPlaceData.append('description', description);\n      newPlaceData.append('creator', U_ID);\n      newPlaceData.append('newPlaceImage', newPlaceImage.inputValue);\n      dispatch(createPlace(newPlaceData, U_ID)); // const response = await fetch(process.env.REACT_APP_BACKEND_URL.split(';')[0] + '/places',\n      //     {\n      //         method: 'POST',\n      //         headers: { Authorization: \"Bearer \" + Authenticated.userToken },\n      //         body: newPlaceData\n      //     });\n      // const responseData = await response.json();\n      // if (!response.ok) {\n      //     setAdding(false);\n      //     history.push(`/`);\n      //     alert(responseData.errorCode + \"\\n\" + responseData.errorMsg)\n      // }\n      // else {\n      //     setAdding(false);\n      //     dispatchPlaceAdded({ type: 'NEW_PLACE_ADDED' })\n      //     history.push(`/${uid}/places`)\n      // }\n    } catch (error) {\n      setAdding(false);\n      alert(error);\n    }\n  };\n\n  useEffect(() => {\n    if (!place) return;\n    const {\n      P_Title,\n      P_Address,\n      P_Image,\n      P_Description\n    } = place;\n    dataSetter({\n      title: {\n        inputValue: P_Title,\n        inputisValid: true\n      },\n      address: {\n        inputValue: P_Address,\n        inputisValid: true\n      },\n      newPlaceImage: {\n        inputValue: P_Image,\n        inputisValid: true\n      }\n    }, true);\n    console.log({\n      P_Title,\n      P_Address,\n      P_Image,\n      P_Description\n    }, dataSetter);\n  }, [place, dataSetter]);\n  useEffect(() => {\n    if (pID && pID !== 'new') {\n      dispatch(getSinglePlace(pID));\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, adding && /*#__PURE__*/React.createElement(Backdrop, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    style: {\n      color: 'gold'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }, \"Adding New Place...\")), /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.addPlaceFORM,\n    onSubmit: addPlace,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ImageInput, {\n    id: \"newPlaceImage\",\n    Error: \"Please Pick an Image\",\n    height: \"300px\",\n    onInputChange: inputChangeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    type: \"Input\",\n    Label: \"Title\",\n    pHolder: \"Enter The Name of Place\",\n    Error: \"Please Enter a Valid Title with MINIMUM LENGTH of 5 and MAXIMUM LENGTH of 50 Words\",\n    onInputChange: inputChangeHandler,\n    validators: [MIN_LENGTH_VALIDATOR(5), MAX_LENGTH_VALIDATOR(50)],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"address\",\n    type: \"Input\",\n    Label: \"Address\",\n    pHolder: \"Enter The Address of Place\",\n    Error: \"Please Enter a Valid Address with MINIMUM LENGTH of 5 and MAXIMUM LENGTH of 80 Words\",\n    onInputChange: inputChangeHandler,\n    validators: [MIN_LENGTH_VALIDATOR(5), MAX_LENGTH_VALIDATOR(80)],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: {\n      color: '#6d6868'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 55\n    }\n  }, \"Description\")), /*#__PURE__*/React.createElement(JoditEditor, {\n    value: description,\n    tabIndex: 1 // tabIndex of textarea\n    ,\n    onChange: newContent => {\n      setDescription(newContent);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !formState.formIsValid || isEmpty(description),\n    className: `btn ${formState.formIsValid ? 'btn-outline-success' : 'btn-danger'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 17\n    }\n  }, \"ADD PLACE\")));\n};\n\nexport default NewPlaces;","map":{"version":3,"sources":["C:/Users/John Deer/Downloads/New folder/src/Places/Pages/NewPlaces.js"],"names":["React","useContext","useEffect","useState","useHistory","useParams","JoditEditor","Input","ImageInput","Spinner","Backdrop","useForm","MIN_LENGTH_VALIDATOR","MAX_LENGTH_VALIDATOR","classes","useDispatch","useSelector","createPlace","getSinglePlace","isEmpty","NewPlaces","dispatch","history","U_ID","JSON","parse","localStorage","getItem","pID","single_place","place","loading_places","state","places","adding","setAdding","description","setDescription","formState","inputChangeHandler","dataSetter","title","inputValue","inputisValid","address","newPlaceImage","addPlace","e","preventDefault","inputs","size","alert","newPlaceData","FormData","append","error","P_Title","P_Address","P_Image","P_Description","console","log","center","color","addPlaceFORM","newContent","formIsValid"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport JoditEditor from \"jodit-react\";\r\n\r\nimport Input from '../../Shared/Components/UI Element/Input';\r\nimport ImageInput from '../../Shared/Components/UI Element/ImageInput';\r\nimport Spinner from '../../Shared/Components/UI Element/Spinner';\r\nimport Backdrop from '../../Shared/Components/Backdrop/Backdrop';\r\nimport { useForm } from '../../Shared/Hooks/Form-Hook';\r\nimport { MIN_LENGTH_VALIDATOR, MAX_LENGTH_VALIDATOR } from '../../Shared/Util/Validators/Validator';\r\nimport classes from './NewPlaces.module.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { createPlace, getSinglePlace } from '../../Actions/PlacesActions';\r\nimport isEmpty from '../../Shared/Util/Validators/isEmpty';\r\n\r\nconst NewPlaces = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const { U_ID } = JSON.parse(localStorage.getItem('userData'));\r\n    const { pID } = useParams() || {};\r\n    const { single_place: place, loading_places } = useSelector( state => state.places);\r\n    const [adding, setAdding] = useState(false);\r\n    const [description, setDescription] = useState('');\r\n    const [formState, inputChangeHandler, dataSetter] = useForm({\r\n        title: {\r\n            inputValue: '',\r\n            inputisValid: false\r\n        },\r\n        address: {\r\n            inputValue: '',\r\n            inputisValid: false\r\n        },\r\n        newPlaceImage: {\r\n            inputValue: '',\r\n            inputisValid: false\r\n        },\r\n    }, false)\r\n\r\n    const addPlace = async e => {\r\n        e.preventDefault();\r\n        if (formState.inputs.newPlaceImage.inputValue.size > 5242880) { alert(\"Please Select An Image With Size Less than 5MB\"); return }\r\n        setAdding(true);\r\n        try {\r\n            const newPlaceData = new FormData();\r\n            const { title, address, newPlaceImage } = formState.inputs || {}\r\n            newPlaceData.append('title', title.inputValue);\r\n            newPlaceData.append('address', address.inputValue);\r\n            newPlaceData.append('description', description);\r\n            newPlaceData.append('creator', U_ID);\r\n            newPlaceData.append('newPlaceImage', newPlaceImage.inputValue);\r\n            dispatch(createPlace(newPlaceData, U_ID));\r\n            // const response = await fetch(process.env.REACT_APP_BACKEND_URL.split(';')[0] + '/places',\r\n            //     {\r\n            //         method: 'POST',\r\n            //         headers: { Authorization: \"Bearer \" + Authenticated.userToken },\r\n            //         body: newPlaceData\r\n            //     });\r\n            // const responseData = await response.json();\r\n\r\n            // if (!response.ok) {\r\n            //     setAdding(false);\r\n            //     history.push(`/`);\r\n            //     alert(responseData.errorCode + \"\\n\" + responseData.errorMsg)\r\n            // }\r\n            // else {\r\n            //     setAdding(false);\r\n            //     dispatchPlaceAdded({ type: 'NEW_PLACE_ADDED' })\r\n            //     history.push(`/${uid}/places`)\r\n            // }\r\n\r\n        }\r\n        catch (error) { setAdding(false); alert(error) }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(!place) return\r\n        const { P_Title, P_Address, P_Image, P_Description } = place;\r\n        dataSetter({\r\n            title: {\r\n                inputValue: P_Title,\r\n                inputisValid: true\r\n            },\r\n            address: {\r\n                inputValue: P_Address,\r\n                inputisValid: true\r\n            },\r\n            newPlaceImage: {\r\n                inputValue: P_Image,\r\n                inputisValid: true\r\n            },\r\n        }, true);\r\n        console.log({ P_Title, P_Address, P_Image, P_Description }, dataSetter)\r\n    },[place, dataSetter])\r\n    useEffect(() => {\r\n        if(pID && pID !== 'new') {\r\n            dispatch(getSinglePlace(pID))\r\n        }\r\n    },[])\r\n    return (\r\n\r\n        <div className={classes.center} >\r\n            {adding &&\r\n                <Backdrop>\r\n                    <Spinner />\r\n                    <h2 style={{ color: 'gold' }}>Adding New Place...</h2>\r\n                </Backdrop>\r\n            }\r\n            <form className={classes.addPlaceFORM} onSubmit={addPlace}>\r\n\r\n                <ImageInput\r\n                    id='newPlaceImage' Error=\"Please Pick an Image\" height='300px'\r\n                    onInputChange={inputChangeHandler}\r\n                />\r\n                <Input\r\n                    id=\"title\" type=\"Input\" Label=\"Title\"\r\n                    pHolder=\"Enter The Name of Place\"\r\n                    Error=\"Please Enter a Valid Title with MINIMUM LENGTH of 5 and MAXIMUM LENGTH of 50 Words\" onInputChange={inputChangeHandler}\r\n                    validators={[MIN_LENGTH_VALIDATOR(5), MAX_LENGTH_VALIDATOR(50)]}\r\n                />\r\n\r\n                <Input\r\n                    id=\"address\" type=\"Input\" Label=\"Address\"\r\n                    pHolder=\"Enter The Address of Place\"\r\n                    Error=\"Please Enter a Valid Address with MINIMUM LENGTH of 5 and MAXIMUM LENGTH of 80 Words\" onInputChange={inputChangeHandler}\r\n                    validators={[MIN_LENGTH_VALIDATOR(5), MAX_LENGTH_VALIDATOR(80)]}\r\n                />\r\n\r\n                {/* <Input  \r\n                    id = \"description\" type = \"textArea\" Label = \"Description\" \r\n                    pHolder = \"Enter Description for Selected Place\"  \r\n                    Error = \"Please Enter a Valid Description with MINIMUM LENGTH of 5\" onInputChange = {inputChangeHandler}\r\n                    validators = {[MIN_LENGTH_VALIDATOR(5)]} \r\n                /> */}\r\n                <div className='mb-3'>\r\n                    <label style={{color: '#6d6868'}}><b>Description</b></label>\r\n                    <JoditEditor\r\n                        value={description}\r\n                        tabIndex={1} // tabIndex of textarea\r\n                        onChange={newContent => { setDescription(newContent) }}\r\n                    />\r\n                </div>\r\n\r\n                <button disabled={!formState.formIsValid || isEmpty(description)} className={`btn ${formState.formIsValid ? 'btn-outline-success' : 'btn-danger'}`}>\r\n                    ADD PLACE\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewPlaces;"]},"metadata":{},"sourceType":"module"}